import unittest
import json
import sys
import os

# Add the root directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from model.video_analyzer_model import calculate_final_score, load_config

class TestScoringLogic(unittest.TestCase):

    def setUp(self):
        """Load the default configuration for tests."""
        self.config = load_config()
        self.base_results = {
            "face_issues": 0,
            "blink_count": 10,
            "avg_blur": 150.0,
            "avg_jitter": 5.0,
            "avg_fft": 100.0,
            "has_natural_breathing": True,
            "watermark_texts": [],
            "avg_ai_score": 0.1, # Score de 0-1
            "metadata": {"format": {"tags": {"comment": "Real video"}}},
            "per_model": [{"model": "Xception", "avg_ai_score": 0.1}]
        }

    def test_real_video_scenario(self):
        """Test a scenario where the video is likely real, resulting in a low score."""
        results = self.base_results.copy()
        final_results = calculate_final_score(results, self.config)
        self.assertEqual(final_results['score'], 0)
        self.assertFalse(final_results['deepfake'])

    def test_fake_video_scenario(self):
        """Test a scenario where the video is likely fake, resulting in a high score."""
        results = {
            "face_issues": 10,
            "blink_count": 1,
            "avg_blur": 50.0,
            "avg_jitter": 20.0,
            "avg_fft": 250.0,
            "has_natural_breathing": False,
            "watermark_texts": ["Generated by AI"],
            "avg_ai_score": 0.9,
            "metadata": {"format": {"tags": {"comment": "This is a fake video with ai keywords"}}},
            "per_model": [{"model": "Xception", "avg_ai_score": 0.9}]
        }
        final_results = calculate_final_score(results, self.config)

        expected_score = (
            self.config['scoring']['weights']['face_issues'] +
            self.config['scoring']['weights']['blink_count'] +
            self.config['scoring']['weights']['blurriness'] +
            self.config['scoring']['weights']['jitter'] +
            self.config['scoring']['weights']['fft'] +
            self.config['scoring']['weights']['ai_model'] +
            self.config['scoring']['weights']['natural_breathing'] +
            self.config['scoring']['weights']['watermark'] +
            self.config['scoring']['weights']['metadata_keywords']
        )

        self.assertEqual(final_results['score'], expected_score)
        self.assertTrue(final_results['deepfake'])

    def test_face_issues_trigger(self):
        """Test if only the face issues rule triggers the score."""
        results = self.base_results.copy()
        results['face_issues'] = 6
        final_results = calculate_final_score(results, self.config)
        self.assertEqual(final_results['score'], self.config['scoring']['weights']['face_issues'])

    def test_blink_count_trigger(self):
        """Test if only the blink count rule triggers the score."""
        results = self.base_results.copy()
        results['blink_count'] = 1
        final_results = calculate_final_score(results, self.config)
        self.assertEqual(final_results['score'], self.config['scoring']['weights']['blink_count'])

    def test_metadata_keywords_trigger(self):
        """Test if only the metadata keywords rule triggers the score."""
        results = self.base_results.copy()
        results['metadata'] = {"format": {"tags": {"comment": "This is a GAN video"}}}
        final_results = calculate_final_score(results, self.config)
        self.assertEqual(final_results['score'], self.config['scoring']['weights']['metadata_keywords'])
        self.assertIn('gan', final_results['found_keywords'])

if __name__ == '__main__':
    unittest.main()
